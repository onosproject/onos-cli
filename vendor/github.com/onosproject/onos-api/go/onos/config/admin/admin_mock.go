// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/config/admin/admin.pb.go

// Package admin is a generated GoMock package.
package admin

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	device "github.com/onosproject/onos-api/go/onos/config/snapshot/device"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockConfigAdminServiceClient is a mock of ConfigAdminServiceClient interface
type MockConfigAdminServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminServiceClientMockRecorder
}

// MockConfigAdminServiceClientMockRecorder is the mock recorder for MockConfigAdminServiceClient
type MockConfigAdminServiceClientMockRecorder struct {
	mock *MockConfigAdminServiceClient
}

// NewMockConfigAdminServiceClient creates a new mock instance
func NewMockConfigAdminServiceClient(ctrl *gomock.Controller) *MockConfigAdminServiceClient {
	mock := &MockConfigAdminServiceClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminServiceClient) EXPECT() *MockConfigAdminServiceClientMockRecorder {
	return m.recorder
}

// UploadRegisterModel mocks base method
func (m *MockConfigAdminServiceClient) UploadRegisterModel(ctx context.Context, opts ...grpc.CallOption) (ConfigAdminService_UploadRegisterModelClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadRegisterModel", varargs...)
	ret0, _ := ret[0].(ConfigAdminService_UploadRegisterModelClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadRegisterModel indicates an expected call of UploadRegisterModel
func (mr *MockConfigAdminServiceClientMockRecorder) UploadRegisterModel(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadRegisterModel", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).UploadRegisterModel), varargs...)
}

// ListRegisteredModels mocks base method
func (m *MockConfigAdminServiceClient) ListRegisteredModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (ConfigAdminService_ListRegisteredModelsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegisteredModels", varargs...)
	ret0, _ := ret[0].(ConfigAdminService_ListRegisteredModelsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredModels indicates an expected call of ListRegisteredModels
func (mr *MockConfigAdminServiceClientMockRecorder) ListRegisteredModels(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModels", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).ListRegisteredModels), varargs...)
}

// RollbackNetworkChange mocks base method
func (m *MockConfigAdminServiceClient) RollbackNetworkChange(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollbackNetworkChange", varargs...)
	ret0, _ := ret[0].(*RollbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackNetworkChange indicates an expected call of RollbackNetworkChange
func (mr *MockConfigAdminServiceClientMockRecorder) RollbackNetworkChange(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackNetworkChange", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).RollbackNetworkChange), varargs...)
}

// ListSnapshots mocks base method
func (m *MockConfigAdminServiceClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (ConfigAdminService_ListSnapshotsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshots", varargs...)
	ret0, _ := ret[0].(ConfigAdminService_ListSnapshotsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots
func (mr *MockConfigAdminServiceClientMockRecorder) ListSnapshots(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).ListSnapshots), varargs...)
}

// CompactChanges mocks base method
func (m *MockConfigAdminServiceClient) CompactChanges(ctx context.Context, in *CompactChangesRequest, opts ...grpc.CallOption) (*CompactChangesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompactChanges", varargs...)
	ret0, _ := ret[0].(*CompactChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompactChanges indicates an expected call of CompactChanges
func (mr *MockConfigAdminServiceClientMockRecorder) CompactChanges(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactChanges", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).CompactChanges), varargs...)
}

// MockConfigAdminService_UploadRegisterModelClient is a mock of ConfigAdminService_UploadRegisterModelClient interface
type MockConfigAdminService_UploadRegisterModelClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_UploadRegisterModelClientMockRecorder
}

// MockConfigAdminService_UploadRegisterModelClientMockRecorder is the mock recorder for MockConfigAdminService_UploadRegisterModelClient
type MockConfigAdminService_UploadRegisterModelClientMockRecorder struct {
	mock *MockConfigAdminService_UploadRegisterModelClient
}

// NewMockConfigAdminService_UploadRegisterModelClient creates a new mock instance
func NewMockConfigAdminService_UploadRegisterModelClient(ctrl *gomock.Controller) *MockConfigAdminService_UploadRegisterModelClient {
	mock := &MockConfigAdminService_UploadRegisterModelClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_UploadRegisterModelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminService_UploadRegisterModelClient) EXPECT() *MockConfigAdminService_UploadRegisterModelClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockConfigAdminService_UploadRegisterModelClient) Send(arg0 *Chunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).Send), arg0)
}

// CloseAndRecv mocks base method
func (m *MockConfigAdminService_UploadRegisterModelClient) CloseAndRecv() (*RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).CloseAndRecv))
}

// Header mocks base method
func (m *MockConfigAdminService_UploadRegisterModelClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockConfigAdminService_UploadRegisterModelClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockConfigAdminService_UploadRegisterModelClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockConfigAdminService_UploadRegisterModelClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockConfigAdminService_UploadRegisterModelClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockConfigAdminService_UploadRegisterModelClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConfigAdminService_UploadRegisterModelClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelClient)(nil).RecvMsg), m)
}

// MockConfigAdminService_ListRegisteredModelsClient is a mock of ConfigAdminService_ListRegisteredModelsClient interface
type MockConfigAdminService_ListRegisteredModelsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListRegisteredModelsClientMockRecorder
}

// MockConfigAdminService_ListRegisteredModelsClientMockRecorder is the mock recorder for MockConfigAdminService_ListRegisteredModelsClient
type MockConfigAdminService_ListRegisteredModelsClientMockRecorder struct {
	mock *MockConfigAdminService_ListRegisteredModelsClient
}

// NewMockConfigAdminService_ListRegisteredModelsClient creates a new mock instance
func NewMockConfigAdminService_ListRegisteredModelsClient(ctrl *gomock.Controller) *MockConfigAdminService_ListRegisteredModelsClient {
	mock := &MockConfigAdminService_ListRegisteredModelsClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListRegisteredModelsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminService_ListRegisteredModelsClient) EXPECT() *MockConfigAdminService_ListRegisteredModelsClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsClient) Recv() (*ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Recv))
}

// Header mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockConfigAdminService_ListRegisteredModelsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockConfigAdminService_ListRegisteredModelsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).RecvMsg), m)
}

// MockConfigAdminService_ListSnapshotsClient is a mock of ConfigAdminService_ListSnapshotsClient interface
type MockConfigAdminService_ListSnapshotsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListSnapshotsClientMockRecorder
}

// MockConfigAdminService_ListSnapshotsClientMockRecorder is the mock recorder for MockConfigAdminService_ListSnapshotsClient
type MockConfigAdminService_ListSnapshotsClientMockRecorder struct {
	mock *MockConfigAdminService_ListSnapshotsClient
}

// NewMockConfigAdminService_ListSnapshotsClient creates a new mock instance
func NewMockConfigAdminService_ListSnapshotsClient(ctrl *gomock.Controller) *MockConfigAdminService_ListSnapshotsClient {
	mock := &MockConfigAdminService_ListSnapshotsClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListSnapshotsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminService_ListSnapshotsClient) EXPECT() *MockConfigAdminService_ListSnapshotsClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockConfigAdminService_ListSnapshotsClient) Recv() (*device.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*device.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockConfigAdminService_ListSnapshotsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsClient)(nil).Recv))
}

// Header mocks base method
func (m *MockConfigAdminService_ListSnapshotsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockConfigAdminService_ListSnapshotsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockConfigAdminService_ListSnapshotsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockConfigAdminService_ListSnapshotsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockConfigAdminService_ListSnapshotsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockConfigAdminService_ListSnapshotsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockConfigAdminService_ListSnapshotsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConfigAdminService_ListSnapshotsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockConfigAdminService_ListSnapshotsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConfigAdminService_ListSnapshotsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockConfigAdminService_ListSnapshotsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConfigAdminService_ListSnapshotsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsClient)(nil).RecvMsg), m)
}

// MockConfigAdminServiceServer is a mock of ConfigAdminServiceServer interface
type MockConfigAdminServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminServiceServerMockRecorder
}

// MockConfigAdminServiceServerMockRecorder is the mock recorder for MockConfigAdminServiceServer
type MockConfigAdminServiceServerMockRecorder struct {
	mock *MockConfigAdminServiceServer
}

// NewMockConfigAdminServiceServer creates a new mock instance
func NewMockConfigAdminServiceServer(ctrl *gomock.Controller) *MockConfigAdminServiceServer {
	mock := &MockConfigAdminServiceServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminServiceServer) EXPECT() *MockConfigAdminServiceServerMockRecorder {
	return m.recorder
}

// UploadRegisterModel mocks base method
func (m *MockConfigAdminServiceServer) UploadRegisterModel(arg0 ConfigAdminService_UploadRegisterModelServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadRegisterModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadRegisterModel indicates an expected call of UploadRegisterModel
func (mr *MockConfigAdminServiceServerMockRecorder) UploadRegisterModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadRegisterModel", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).UploadRegisterModel), arg0)
}

// ListRegisteredModels mocks base method
func (m *MockConfigAdminServiceServer) ListRegisteredModels(arg0 *ListModelsRequest, arg1 ConfigAdminService_ListRegisteredModelsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredModels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegisteredModels indicates an expected call of ListRegisteredModels
func (mr *MockConfigAdminServiceServerMockRecorder) ListRegisteredModels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModels", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).ListRegisteredModels), arg0, arg1)
}

// RollbackNetworkChange mocks base method
func (m *MockConfigAdminServiceServer) RollbackNetworkChange(arg0 context.Context, arg1 *RollbackRequest) (*RollbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackNetworkChange", arg0, arg1)
	ret0, _ := ret[0].(*RollbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackNetworkChange indicates an expected call of RollbackNetworkChange
func (mr *MockConfigAdminServiceServerMockRecorder) RollbackNetworkChange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackNetworkChange", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).RollbackNetworkChange), arg0, arg1)
}

// ListSnapshots mocks base method
func (m *MockConfigAdminServiceServer) ListSnapshots(arg0 *ListSnapshotsRequest, arg1 ConfigAdminService_ListSnapshotsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSnapshots indicates an expected call of ListSnapshots
func (mr *MockConfigAdminServiceServerMockRecorder) ListSnapshots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).ListSnapshots), arg0, arg1)
}

// CompactChanges mocks base method
func (m *MockConfigAdminServiceServer) CompactChanges(arg0 context.Context, arg1 *CompactChangesRequest) (*CompactChangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactChanges", arg0, arg1)
	ret0, _ := ret[0].(*CompactChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompactChanges indicates an expected call of CompactChanges
func (mr *MockConfigAdminServiceServerMockRecorder) CompactChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactChanges", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).CompactChanges), arg0, arg1)
}

// MockConfigAdminService_UploadRegisterModelServer is a mock of ConfigAdminService_UploadRegisterModelServer interface
type MockConfigAdminService_UploadRegisterModelServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_UploadRegisterModelServerMockRecorder
}

// MockConfigAdminService_UploadRegisterModelServerMockRecorder is the mock recorder for MockConfigAdminService_UploadRegisterModelServer
type MockConfigAdminService_UploadRegisterModelServerMockRecorder struct {
	mock *MockConfigAdminService_UploadRegisterModelServer
}

// NewMockConfigAdminService_UploadRegisterModelServer creates a new mock instance
func NewMockConfigAdminService_UploadRegisterModelServer(ctrl *gomock.Controller) *MockConfigAdminService_UploadRegisterModelServer {
	mock := &MockConfigAdminService_UploadRegisterModelServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_UploadRegisterModelServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminService_UploadRegisterModelServer) EXPECT() *MockConfigAdminService_UploadRegisterModelServerMockRecorder {
	return m.recorder
}

// SendAndClose mocks base method
func (m *MockConfigAdminService_UploadRegisterModelServer) SendAndClose(arg0 *RegisterResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).SendAndClose), arg0)
}

// Recv mocks base method
func (m *MockConfigAdminService_UploadRegisterModelServer) Recv() (*Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockConfigAdminService_UploadRegisterModelServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockConfigAdminService_UploadRegisterModelServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockConfigAdminService_UploadRegisterModelServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockConfigAdminService_UploadRegisterModelServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockConfigAdminService_UploadRegisterModelServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockConfigAdminService_UploadRegisterModelServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConfigAdminService_UploadRegisterModelServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_UploadRegisterModelServer)(nil).RecvMsg), m)
}

// MockConfigAdminService_ListRegisteredModelsServer is a mock of ConfigAdminService_ListRegisteredModelsServer interface
type MockConfigAdminService_ListRegisteredModelsServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListRegisteredModelsServerMockRecorder
}

// MockConfigAdminService_ListRegisteredModelsServerMockRecorder is the mock recorder for MockConfigAdminService_ListRegisteredModelsServer
type MockConfigAdminService_ListRegisteredModelsServerMockRecorder struct {
	mock *MockConfigAdminService_ListRegisteredModelsServer
}

// NewMockConfigAdminService_ListRegisteredModelsServer creates a new mock instance
func NewMockConfigAdminService_ListRegisteredModelsServer(ctrl *gomock.Controller) *MockConfigAdminService_ListRegisteredModelsServer {
	mock := &MockConfigAdminService_ListRegisteredModelsServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListRegisteredModelsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminService_ListRegisteredModelsServer) EXPECT() *MockConfigAdminService_ListRegisteredModelsServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsServer) Send(arg0 *ModelInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockConfigAdminService_ListRegisteredModelsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockConfigAdminService_ListRegisteredModelsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockConfigAdminService_ListRegisteredModelsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).RecvMsg), m)
}

// MockConfigAdminService_ListSnapshotsServer is a mock of ConfigAdminService_ListSnapshotsServer interface
type MockConfigAdminService_ListSnapshotsServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListSnapshotsServerMockRecorder
}

// MockConfigAdminService_ListSnapshotsServerMockRecorder is the mock recorder for MockConfigAdminService_ListSnapshotsServer
type MockConfigAdminService_ListSnapshotsServerMockRecorder struct {
	mock *MockConfigAdminService_ListSnapshotsServer
}

// NewMockConfigAdminService_ListSnapshotsServer creates a new mock instance
func NewMockConfigAdminService_ListSnapshotsServer(ctrl *gomock.Controller) *MockConfigAdminService_ListSnapshotsServer {
	mock := &MockConfigAdminService_ListSnapshotsServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListSnapshotsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigAdminService_ListSnapshotsServer) EXPECT() *MockConfigAdminService_ListSnapshotsServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockConfigAdminService_ListSnapshotsServer) Send(arg0 *device.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockConfigAdminService_ListSnapshotsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockConfigAdminService_ListSnapshotsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockConfigAdminService_ListSnapshotsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockConfigAdminService_ListSnapshotsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockConfigAdminService_ListSnapshotsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockConfigAdminService_ListSnapshotsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockConfigAdminService_ListSnapshotsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockConfigAdminService_ListSnapshotsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConfigAdminService_ListSnapshotsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockConfigAdminService_ListSnapshotsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConfigAdminService_ListSnapshotsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockConfigAdminService_ListSnapshotsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConfigAdminService_ListSnapshotsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListSnapshotsServer)(nil).RecvMsg), m)
}
